@model CasaConnect.Models.Conversation
@{
    ViewData["Title"] = "Conversation - " + Model.Property.Title;
    var currentUserId = int.Parse(User.FindFirst("UserId").Value);
    var otherUser = currentUserId == Model.SeekerId ? Model.Owner : Model.Seeker;
}

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-white">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <div class="d-flex align-items-center gap-2">
                        <h5 class="mb-0">@otherUser.FirstName @otherUser.LastName</h5>
                        <small class="text-muted">@Model.Property.Title</small>
                    </div>
                    <span class="badge bg-success ms-3 d-none" id="onlineStatus">Online</span>
                </div>
                <div class="btn-group">
                    <button class="btn btn-outline-danger btn-sm"
                            id="deleteAllMessages"
                            data-bs-toggle="tooltip"
                            title="Delete all messages">
                        <i class="fas fa-trash-alt me-1"></i>
                        Delete Messages
                    </button>
                    <button class="btn btn-danger btn-sm"
                            id="deleteConversation"
                            data-bs-toggle="tooltip"
                            title="Delete entire conversation">
                        <i class="fas fa-times me-1"></i>
                        Delete Conversation
                    </button>
                    <a href="@Url.Action("PropertyDetails", "Home", new { id = Model.PropertyId })"
                       class="btn btn-outline-primary btn-sm"
                       data-bs-toggle="tooltip"
                       title="View property details">
                        <i class="fas fa-home me-1"></i>
                        View Property
                    </a>
                </div>
            </div>
        </div>

        <div class="message-container" id="messageContainer">
            @foreach (var message in Model.Messages.OrderBy(m => m.SentAt))
            {
                var isSent = message.SenderId == currentUserId;
                <div class="message @(isSent ? "message-sent" : "message-received")"
                     data-message-id="@message.Id">
                    <div class="message-content">@message.Content</div>
                    @if (isSent)
                    {
                        <div class="message-options">
                            <button class="btn btn-link text-white p-0 delete-message"
                                    data-message-id="@message.Id"
                                    data-bs-toggle="tooltip"
                                    title="Delete message">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    }
                    <div class="message-info">
                        <small class="message-time">
                            @message.SentAt.ToLocalTime().ToString("MMM dd, yyyy h:mm tt")
                        </small>
                        @if (isSent)
                        {
                            <span class="message-status ms-1">
                                @(message.ReadAt.HasValue ? "✓✓" : "✓")
                            </span>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="typing-indicator ms-3 mb-2 d-none" id="typingIndicator">
            <small class="text-muted">
                <i class="fas fa-keyboard me-1"></i>
                @otherUser.FirstName is typing...
            </small>
        </div>

        <div class="card-footer bg-white">
            <form id="messageForm" class="d-flex gap-2">
                @Html.AntiForgeryToken()
                <input type="hidden" id="conversationId" value="@Model.Id" />
                <input type="hidden" id="currentUserId" value="@currentUserId" />
                <div class="input-group">
                    <input type="text"
                           id="messageInput"
                           class="form-control"
                           placeholder="Type your message..."
                           required
                           autocomplete="off" />
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-paper-plane me-1"></i>
                        Send
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>

@section Styles {
    <style>
        .message-container {
            height: 60vh;
            overflow-y: auto;
            padding: 1rem;
            background-color: #f8f9fa;
            display: flex;
            flex-direction: column;
            gap: 1rem;
        }

        .message {
            max-width: 75%;
            padding: 0.75rem 1rem;
            border-radius: 1rem;
            position: relative;
            word-break: break-word;
        }

        .message-sent {
            margin-left: auto;
            background-color: #0d6efd;
            color: white;
            border-bottom-right-radius: 0.25rem;
        }

        .message-received {
            margin-right: auto;
            background-color: white;
            border-bottom-left-radius: 0.25rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message-options {
            position: absolute;
            top: 0.5rem;
            right: 0.5rem;
            opacity: 0;
            transition: opacity 0.2s ease-in-out;
        }

        .message:hover .message-options {
            opacity: 1;
        }

        .message-info {
            display: flex;
            align-items: center;
            justify-content: flex-end;
            margin-top: 0.25rem;
            font-size: 0.75rem;
        }

        .message-sent .message-info {
            color: rgba(255,255,255,0.8);
        }

        .message-received .message-info {
            color: #6c757d;
        }

        .typing-indicator {
            padding: 0.5rem 1rem;
            background-color: #f8f9fa;
            border-top: 1px solid #dee2e6;
        }

        /* Custom scrollbar */
        .message-container::-webkit-scrollbar {
            width: 6px;
        }

        .message-container::-webkit-scrollbar-track {
            background: #f1f1f1;
        }

        .message-container::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 3px;
        }

        .message-container::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
}

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Initialize tooltips
        var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
        var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
            return new bootstrap.Tooltip(tooltipTriggerEl)
        });

        // Set up SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/messageHub")
            .withAutomaticReconnect()
            .build();

        const messageContainer = document.getElementById('messageContainer');
        const messageForm = document.getElementById('messageForm');
        const messageInput = document.getElementById('messageInput');
        const typingIndicator = document.getElementById('typingIndicator');
        const conversationId = document.getElementById('conversationId').value;
        const currentUserId = document.getElementById('currentUserId').value;

        let typingTimeout;

        // Start SignalR connection
        async function startConnection() {
            try {
                await connection.start();
                console.log('Connected to SignalR hub');

                // Join the conversation group
                await connection.invoke("JoinConversation", conversationId);
            } catch (err) {
                console.error('Error connecting to hub:', err);
                setTimeout(startConnection, 5000);
            }
        }

        startConnection();

        // Send message
        messageForm.addEventListener('submit', async (e) => {
            e.preventDefault();

            const content = messageInput.value.trim();
            if (!content) return;

            try {
                const response = await fetch('/Messages/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({
                        conversationId: parseInt(conversationId),
                        content: content
                    })
                });

                const result = await response.json();
                if (result.success) {
                    // Display the message immediately after successful send
                    appendMessage(result.message);
                    scrollToBottom();
                    
                    messageInput.value = '';
                    messageInput.focus();
                } else {
                    throw new Error(result.error || 'Failed to send message');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                alert('Failed to send message: ' + error.message);
            }
        });

        // Handle typing indicator
        messageInput.addEventListener('input', () => {
            clearTimeout(typingTimeout);
            connection.invoke("UserTyping", conversationId);

            typingTimeout = setTimeout(() => {
                connection.invoke("UserStoppedTyping", conversationId);
            }, 1000);
        });

        // Delete message handler
        document.addEventListener('click', async function (e) {
            if (e.target.closest('.delete-message')) {
                e.preventDefault();
                e.stopPropagation();

                const button = e.target.closest('.delete-message');
                const messageId = button.dataset.messageId;

                if (!confirm('Are you sure you want to delete this message?')) return;

                try {
                    const response = await fetch('/Messages/DeleteMessage', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                            'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                        },
                        body: JSON.stringify({ messageId: parseInt(messageId) })
                    });

                    const result = await response.json();
                    if (!result.success) {
                        throw new Error(result.error || 'Failed to delete message');
                    }
                } catch (error) {
                    console.error('Error deleting message:', error);
                    alert('Failed to delete message: ' + error.message);
                }
            }
        });

        // Delete all messages handler
        document.getElementById('deleteAllMessages').addEventListener('click', async function (e) {
            e.preventDefault();
            if (!confirm('Are you sure you want to delete all messages in this conversation?')) return;

            try {
                const response = await fetch('/Messages/DeleteAllMessages', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ conversationId: parseInt(conversationId) })
                });

                const result = await response.json();
                if (!result.success) {
                    throw new Error(result.error || 'Failed to delete messages');
                }
            } catch (error) {
                console.error('Error deleting all messages:', error);
                alert('Failed to delete messages: ' + error.message);
            }
        });

        // Delete conversation handler
        document.getElementById('deleteConversation').addEventListener('click', async function (e) {
            e.preventDefault();
            if (!confirm('Are you sure you want to delete this entire conversation? This cannot be undone.')) return;

            try {
                const response = await fetch('/Messages/DeleteConversation', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ conversationId: parseInt(conversationId) })
                });

                const result = await response.json();
                if (result.success) {
                    window.location.href = '/Messages';
                } else {
                    throw new Error(result.error || 'Failed to delete conversation');
                }
            } catch (error) {
                console.error('Error deleting conversation:', error);
                alert('Failed to delete conversation: ' + error.message);
            }
        });

        // Add this to your existing SignalR handlers section
        connection.on("ReceiveMessage", function (message) {
            if (message.conversationId === parseInt(conversationId) &&
                message.senderId !== parseInt(currentUserId)) {
                appendMessage(message);
                scrollToBottom();

                // Mark the message as read since we're viewing the conversation
                markMessageAsRead(message.id);
            }
        });

        // Add this new handler for message read status
        connection.on("MessageRead", function (messageId) {
            const messageElement = document.querySelector(`[data-message-id="${messageId}"]`);
            if (messageElement) {
                const statusElement = messageElement.querySelector('.message-status');
                if (statusElement) {
                    statusElement.textContent = '✓✓';  // Double check mark for read
                }
            }
        });

        // In Conversation.cshtml, add to your existing SignalR handlers
        connection.on("UnreadCountUpdated", function (count) {
            updateUnreadBadge(count);
        });

        // Add this helper function
        function updateUnreadBadge(count) {
            const unreadBadge = document.getElementById('unreadBadge');
            const unreadCount = document.getElementById('unreadCount');

            if (count > 0) {
                unreadCount.textContent = count;
                unreadBadge.classList.remove('d-none');
            } else {
                unreadBadge.classList.add('d-none');
            }
        }

        // Update the markMessageAsRead function
        async function markMessageAsRead(messageId) {
            try {
                const response = await fetch('/Messages/MarkMessageAsRead', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ messageId: messageId })
                });

                const result = await response.json();
                if (result.success && result.unreadCount !== undefined) {
                    updateUnreadBadge(result.unreadCount);
                }
            } catch (error) {
                console.error('Error marking message as read:', error);
            }
        }

        connection.on("MessageDeleted", function (data) {
            const messageElement = document.querySelector(`[data-message-id="${data.messageId}"]`);
            if (messageElement) {
                messageElement.remove();
            }
        });

        connection.on("AllMessagesDeleted", function (convId) {
            if (convId === parseInt(conversationId)) {
                messageContainer.innerHTML = '';
            }
        });

        connection.on("ConversationDeleted", function (convId) {
            if (convId === parseInt(conversationId)) {
                window.location.href = '/Messages';
            }
        });

        connection.on("UserTyping", function (userId) {
            if (userId !== parseInt(currentUserId)) {
                typingIndicator.classList.remove('d-none');
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    typingIndicator.classList.add('d-none');
                }, 3000);
            }
        });

        // Helper functions
        function appendMessage(message) {
            const isSent = message.senderId === parseInt(currentUserId);
            const messageElement = document.createElement('div');
            messageElement.className = `message ${isSent ? 'message-sent' : 'message-received'}`;
            messageElement.dataset.messageId = message.id;

            messageElement.innerHTML = `
                <div class="message-content">${escapeHtml(message.content)}</div>
                ${isSent ? `
                    <div class="message-options">
                        <button class="btn btn-link text-white p-0 delete-message"
                                data-message-id="${message.id}"
                                data-bs-toggle="tooltip"
                                title="Delete message">
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                ` : ''}
                <div class="message-info">
                    <small class="message-time">
                        ${formatDateTime(message.sentAt)}
                    </small>
                    ${isSent ? `
                        <span class="message-status ms-1">✓</span>
                    ` : ''}
                </div>
            `;

            messageContainer.appendChild(messageElement);

            // Initialize tooltip for new delete button
            const newTooltip = messageElement.querySelector('[data-bs-toggle="tooltip"]');
            if (newTooltip) {
                new bootstrap.Tooltip(newTooltip);
            }
        }

        function scrollToBottom() {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        function formatDateTime(dateString) {
            const date = new Date(dateString);
            return date.toLocaleString('en-US', {
                month: 'short',
                day: 'numeric',
                year: 'numeric',
                hour: 'numeric',
                minute: '2-digit',
                hour12: true
            });
        }

        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Initial scroll to bottom and set up observer
        scrollToBottom();
        const observer = new MutationObserver(scrollToBottom);
        observer.observe(messageContainer, { childList: true });

        // Cleanup on page unload
        window.addEventListener('beforeunload', () => {
            connection.invoke("LeaveConversation", conversationId);
            observer.disconnect();
            tooltipList.forEach(tooltip => tooltip.dispose());
        });
    </script>
}
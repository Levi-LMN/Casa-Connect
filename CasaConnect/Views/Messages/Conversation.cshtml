@model CasaConnect.Models.Conversation

@{
    ViewData["Title"] = "Conversation - " + Model.Property.Title;
    var currentUserId = int.Parse(User.FindFirst("UserId").Value);
    var otherUser = currentUserId == Model.SeekerId ? Model.Owner : Model.Seeker;
}

@section Styles {
    <style>
        .message-container {
            height: 60vh;
            overflow-y: auto;
            padding: 1rem;
            background-color: #f8f9fa;
        }

        .message {
            max-width: 75%;
            margin-bottom: 1rem;
            word-break: break-word;
            border-radius: 1rem;
            box-shadow: 0 1px 2px rgba(0,0,0,0.1);
        }

        .message-sent {
            margin-left: auto;
            background-color: #007bff;
            color: white;
            border-bottom-right-radius: 0.25rem;
        }

        .message-received {
            margin-right: auto;
            background-color: white;
            border-bottom-left-radius: 0.25rem;
        }

        .message-status {
            font-size: 0.75rem;
            color: #6c757d;
        }

        .message-sent .message-status {
            color: rgba(255,255,255,0.8);
        }

        .typing-indicator {
            display: none;
            font-size: 0.875rem;
            color: #6c757d;
            padding: 0.5rem;
        }

        .form-control:focus {
            box-shadow: none;
            border-color: #007bff;
        }

        .loading-spinner {
            width: 1rem;
            height: 1rem;
            display: none;
        }
    </style>
}

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-white">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex align-items-center">
                    <h3 class="mb-0 me-3">
                        @otherUser.FirstName @otherUser.LastName
                    </h3>
                    <span class="badge bg-success d-none" id="onlineStatus">Online</span>
                </div>
                <div>
                    <a href="@Url.Action("PropertyDetails", "Home", new { id = Model.PropertyId })"
                       class="btn btn-outline-primary btn-sm">
                        View Property
                    </a>
                </div>
            </div>
        </div>

        <div class="card-body p-0">
            <div class="message-container" id="messageContainer">
                @foreach (var message in Model.Messages.OrderBy(m => m.SentAt))
                {
                    var isSent = message.SenderId == currentUserId;
                    <div class="message p-3 @(isSent ? "message-sent" : "message-received")">
                        <div class="message-content">@message.Content</div>
                        <div class="message-status text-end">
                            @message.SentAt.ToLocalTime().ToString("MMM dd, yyyy h:mm tt")
                            @if (isSent && message.ReadAt.HasValue)
                            {
                                <span class="ms-1">✓✓</span>
                            }
                            else if (isSent)
                            {
                                <span class="ms-1">✓</span>
                            }
                        </div>
                    </div>
                }
            </div>
            <div class="typing-indicator ms-3" id="typingIndicator">
                @otherUser.FirstName is typing...
            </div>
        </div>

        <div class="card-footer bg-white">
            <form id="messageForm" class="d-flex gap-2">
                @Html.AntiForgeryToken()
                <input type="hidden" id="conversationId" value="@Model.Id" />
                <input type="text"
                       id="messageInput"
                       class="form-control"
                       placeholder="Type your message..."
                       required
                       autocomplete="off" />
                <button type="submit" class="btn btn-primary d-flex align-items-center gap-2">
                    <span class="d-none loading-spinner spinner-border spinner-border-sm" role="status"></span>
                    <span>Send</span>
                </button>
            </form>
        </div>
    </div>
</div>

@section Scripts {
    <script src="~/lib/microsoft/signalr/dist/browser/signalr.min.js"></script>
    <script>
        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/messageHub")
            .withAutomaticReconnect([0, 2000, 5000, 10000, null])
            .build();

        // Get DOM elements
        const messageForm = document.getElementById("messageForm");
        const messageInput = document.getElementById("messageInput");
        const messageContainer = document.getElementById("messageContainer");
        const typingIndicator = document.getElementById("typingIndicator");
        const onlineStatus = document.getElementById("onlineStatus");
        const conversationId = document.getElementById("conversationId").value;
        const currentUserId = @currentUserId;

        let typingTimeout;
        let isConnected = false;

        // Start SignalR connection
        async function startConnection() {
            try {
                await connection.start();
                console.log("SignalR Connected.");
                isConnected = true;
                onlineStatus.classList.remove("d-none");
            } catch (err) {
                console.error("SignalR Connection Error: ", err);
                isConnected = false;
                onlineStatus.classList.add("d-none");
                setTimeout(startConnection, 5000);
            }
        }

        // Handle connection events
        connection.onclose(async () => {
            isConnected = false;
            onlineStatus.classList.add("d-none");
            await startConnection();
        });

        // Handle receiving messages
        connection.on("ReceiveMessage", function (message) {
            if (message.conversationId === parseInt(conversationId)) {
                appendMessage(message);
                scrollToBottom();
                typingIndicator.style.display = "none";
            }
        });

        // Handle typing indicator
        connection.on("UserTyping", function (userId, conversationId) {
            if (userId !== currentUserId && conversationId === parseInt(conversationId)) {
                typingIndicator.style.display = "block";
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    typingIndicator.style.display = "none";
                }, 1000);
            }
        });

        // Handle form submission
        messageForm.addEventListener("submit", async function (e) {
            e.preventDefault();

            const content = messageInput.value.trim();
            if (!content) return;

            const submitButton = this.querySelector('button[type="submit"]');
            const spinner = submitButton.querySelector('.loading-spinner');

            submitButton.disabled = true;
            spinner.classList.remove('d-none');

            try {
                const response = await fetch('/Messages/SendMessage', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ conversationId, content })
                });

                const result = await response.json().catch(() => ({
                    success: false,
                    error: 'Failed to parse server response'
                }));

                if (!response.ok) {
                    throw new Error(result.error || result.details || `Server returned ${response.status}`);
                }

                if (result.success) {
                    messageInput.value = '';
                    appendMessage(result.message);
                    scrollToBottom();
                } else {
                    throw new Error(result.error || 'Failed to send message');
                }
            } catch (error) {
                console.error('Error sending message:', error);
                showToast(error.message || 'Failed to send message. Please try again.', 'error');
            } finally {
                submitButton.disabled = false;
                spinner.classList.add('d-none');
            }
        });

        // Handle typing events
        let typingTimer;
        messageInput.addEventListener('input', async function () {
            if (!isConnected) return;

            clearTimeout(typingTimer);

            try {
                await connection.invoke("UserTyping", parseInt(conversationId));
            } catch (err) {
                console.error("Error sending typing indicator:", err);
            }

            typingTimer = setTimeout(() => { }, 1000);
        });

        // Function to append a new message
        function appendMessage(message) {
            if (!message) return;

            const messageDiv = document.createElement("div");
            const isSent = message.senderId === currentUserId;
            messageDiv.className = `message p-3 ${isSent ? "message-sent" : "message-received"}`;

            const sentAt = message.sentAt ? new Date(message.sentAt).toLocaleString() : new Date().toLocaleString();

            messageDiv.innerHTML = `
                        <div class="message-content">${escapeHtml(message.content)}</div>
                        <div class="message-status text-end">
                            ${sentAt}
                            ${isSent ? '<span class="ms-1">✓</span>' : ''}
                        </div>
                    `;

            messageContainer.appendChild(messageDiv);
        }

        // Helper function to escape HTML
        function escapeHtml(unsafe) {
            return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
        }

        // Function to show toast notifications
        function showToast(message, type = 'info') {
            // Implement your preferred toast notification here
            alert(message);
        }

        // Function to scroll to bottom of message container
        function scrollToBottom() {
            messageContainer.scrollTop = messageContainer.scrollHeight;
        }

        // Scroll to bottom on initial load
        scrollToBottom();

        // Start the SignalR connection
        startConnection();

        // Add keyboard shortcut for sending messages
        messageInput.addEventListener('keydown', function (e) {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                messageForm.dispatchEvent(new Event('submit'));
            }
        });
    </script>
}